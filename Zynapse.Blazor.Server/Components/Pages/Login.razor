@page "/login"
@using Zynapse.Blazor.Server.Services
@inject FirebaseAuthService AuthService
@inject NavigationManager NavigationManager
@inject FirebaseAuthenticationStateProvider AuthStateProvider

<PageTitle>Login - Zynapse</PageTitle>

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h3>Login</h3>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(error))
                    {
                        <div class="alert alert-danger">
                            @error
                        </div>
                    }
                    <div class="mb-3">
                        <label for="email" class="form-label">Email</label>
                        <input type="email" class="form-control" id="email" @bind="email" />
                    </div>
                    <div class="mb-3">
                        <label for="password" class="form-label">Password</label>
                        <input type="password" class="form-control" id="password" @bind="password" />
                    </div>
                    <div class="d-grid gap-2">
                        <button class="btn btn-primary" @onclick="HandleLogin">Login</button>
                        <button class="btn btn-secondary" @onclick="HandleCreateAccount">Create Account</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string email = string.Empty;
    private string password = string.Empty;
    private string error = string.Empty;

    private async Task HandleLogin()
    {
        try
        {
            error = string.Empty;
            var success = await AuthService.SignInWithEmailAndPasswordAsync(email, password);
            if (success)
            {
                AuthStateProvider.NotifyStateChanged();
                NavigationManager.NavigateTo("/profile", replace: true);
            }
            else
            {
                error = "Invalid email or password. Please try again or create an account.";
            }
        }
        catch (Exception ex)
        {
            error = $"An error occurred: {ex.Message}";
        }
    }

    private async Task HandleCreateAccount()
    {
        try
        {
            error = string.Empty;
            var success = await AuthService.CreateUserWithEmailAndPasswordAsync(email, password);
            if (success)
            {
                AuthStateProvider.NotifyStateChanged();
                NavigationManager.NavigateTo("/profile", replace: true);
            }
            else
            {
                error = "Failed to create account. The email might already be in use.";
            }
        }
        catch (Exception ex)
        {
            error = $"An error occurred: {ex.Message}";
        }
    }
} 